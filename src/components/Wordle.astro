---
import { Icon } from "astro-icon/components";
import { getRandomWord } from "../data/words";
const word = getRandomWord();
---

<main class="flex flex-col grow">
  <h1 class="text-3xl font-bold text-center my-4 dark:text-white">Wordle ES</h1>

  <!-- <p class="text-center mb-4 text-lg font-semibold dark:text-white">
    Palabra: {word}
  </p> -->

  <!-- Game board container centered with flexible space -->
  <div
    class="flex grow flex-col items-center justify-center animate-fade-in-scale"
  >
    <div id="game-board" class="grid gap-1 w-fit">
      {
        Array(6)
          .fill(null)
          .map((_, __) => (
            <div class="row flex gap-1">
              {Array(5)
                .fill(null)
                .map((_, __) => (
                  <div class="w-14 h-14 md:w-16 md:h-16 border-2 border-gray-300 dark:border-gray-600 flex items-center justify-center rounded text-2xl font-bold uppercase transition-colors dark:text-white" />
                ))}
            </div>
          ))
      }
    </div>
  </div>

  <!-- Keyboard container positioned at the bottom -->
  <div id="keyboard" class="max-w-max mx-auto w-full p-1">
    <div class="flex flex-col max-w-lg gap-1 md:gap-2">
      <div class="flex justify-center gap-1 md:gap-2">
        {
          ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"].map((letter) => (
            <button
              data-key={letter}
              class="keyboard-btn w-12 h-12 text-lg font-semibold rounded bg-gray-200 dark:bg-gray-700 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            >
              {letter}
            </button>
          ))
        }
      </div>
      <div class="flex justify-center gap-1 md:gap-2">
        {
          ["A", "S", "D", "F", "G", "H", "J", "K", "L", "Ñ"].map((letter) => (
            <button
              data-key={letter}
              class="keyboard-btn w-12 h-12 text-lg font-semibold rounded bg-gray-200 dark:bg-gray-700 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            >
              {letter}
            </button>
          ))
        }
      </div>
      <div class="flex justify-center gap-1 md:gap-2">
        <button
          id="enter-btn"
          class="w-[calc(60px+0.5rem)] h-12 text-lg font-semibold rounded bg-gray-200 dark:bg-gray-700 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors flex items-center justify-center"
        >
          <Icon name="fa6-solid:check" />
        </button>
        {
          ["Z", "X", "C", "V", "B", "N", "M"].map((letter) => (
            <button
              data-key={letter}
              class="keyboard-btn w-12 h-12 text-lg font-semibold rounded bg-gray-200 dark:bg-gray-700 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
            >
              {letter}
            </button>
          ))
        }
        <button
          id="delete-btn"
          class="w-[calc(60px+0.5rem)] h-12 text-lg font-semibold rounded bg-gray-200 dark:bg-gray-700 dark:text-white hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors flex items-center justify-center"
        >
          <Icon name="fa6-solid:delete-left" />
        </button>
      </div>
    </div>
  </div>
</main>

<script is:inline define:vars={{ word }}>
  let currentRow = 0;
  let currentCol = 0;
  const maxRows = 6;
  const maxCols = 5;

  const gameBoard = document.getElementById("game-board");
  const rows = gameBoard.getElementsByClassName("row");

  function getCurrentCell() {
    return rows[currentRow].children[currentCol];
  }

  function updateCell(letter) {
    if (currentCol < maxCols) {
      getCurrentCell().textContent = letter;
      currentCol++;
    }
  }

  function deleteLetter() {
    if (currentCol > 0) {
      currentCol--;
      getCurrentCell().textContent = "";
    }
  }

  function updateKeyboardKey(letter, status) {
    const key = document.querySelector(`[data-key="${letter}"]`);
    if (key) {
      // Remove previous background and border classes
      key.classList.remove(
        "bg-green-600",
        "bg-yellow-500",
        "bg-gray-500",
        "bg-gray-200",
        "dark:bg-gray-700",
        "border-gray-500",
        "text-white",
        "text-gray-500"
      );

      // Add new classes based on status
      if (status === "correct") {
        key.classList.add("bg-green-600", "text-white");
      } else if (status === "present") {
        key.classList.add("bg-yellow-500", "text-white");
      } else if (status === "absent") {
        // Set key to outline style: transparent background and border colored with absent color
        key.classList.add(
          "border",
          "border-gray-200",
          "dark:border-gray-700",
          "bg-transparent",
          "text-gray-500"
        );
      }
    }
  }

  function checkWord() {
    if (currentCol === maxCols) {
      const rowCells = rows[currentRow].children;
      let guess = "";

      for (let i = 0; i < maxCols; i++) {
        guess += rowCells[i].textContent;
      }

      for (let i = 0; i < maxCols; i++) {
        const cell = rowCells[i];
        const letter = guess[i];

        if (letter === word[i]) {
          cell.classList.add(
            "bg-green-600",
            "border-green-600",
            "dark:border-green-600",
            "text-white"
          );
          updateKeyboardKey(letter, "correct");
        } else if (word.includes(letter)) {
          cell.classList.add(
            "bg-yellow-500",
            "border-yellow-500",
            "dark:border-yellow-500",
            "text-white"
          );
          // Solo actualizar si la tecla no está ya marcada como correcta
          const key = document.querySelector(`[data-key="${letter}"]`);
          if (!key.classList.contains("bg-green-600")) {
            updateKeyboardKey(letter, "present");
          }
        } else {
          cell.classList.add(
            "bg-gray-500",
            "border-gray-500",
            "dark:border-gray-500",
            "text-white"
          );
          updateKeyboardKey(letter, "absent");
        }
      }

      if (guess === word) {
        setTimeout(() => {
          Swal.fire({
            title: "¡Felicidades!",
            text: "Has ganado.",
            icon: "success",
            confirmButtonText: "¡Excelente! Otra palabra?",
            theme: localStorage.theme === "dark" ? "dark" : "light",
          }).then(() => window.location.reload());
        }, 100);
        return;
      }

      currentRow++;
      currentCol = 0;

      if (currentRow === maxRows) {
        setTimeout(() => {
          Swal.fire({
            title: "¡Game Over!",
            html: `La palabra era: <strong>${word}</strong>`,
            icon: "error",
            confirmButtonText: "¡Vuelve a intentarlo!",
            theme: localStorage.theme === "dark" ? "dark" : "light",
          }).then(() => window.location.reload());
        }, 100);
      }
    }
  }

  document.querySelectorAll(".keyboard-btn").forEach((btn) => {
    btn.addEventListener("click", () => updateCell(btn.textContent));
  });

  document.getElementById("enter-btn").addEventListener("click", checkWord);
  document.getElementById("delete-btn").addEventListener("click", deleteLetter);

  document.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      checkWord();
    } else if (e.key === "Backspace") {
      deleteLetter();
    } else if (/^[a-zA-ZñÑ]$/.test(e.key)) {
      updateCell(e.key.toUpperCase());
    }
  });
</script>
